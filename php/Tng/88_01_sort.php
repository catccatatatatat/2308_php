<?php

// 버블 정렬
/*$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];


print_r($arr);*/

$arr2 = [3, 2, 1];



//tmp: 임시
$tmp = $arr2[0];
$arr2[0] = $arr2[1];
$arr2[1] = $tmp;
print_r($arr2);


/*$arr = [12, 13, 20, 24, 30];
$length = count($arr);

function bubbleSort(&$arr) {
    $n = count($arr);
    for ($i = 0; $i < $n - 1; $i++) {
        for ($j = 0; $j < $n - $i - 1; $j++) {
            if ($arr[$j] > $arr[$j + 1]) {
                $temp = $arr[$j];
                $arr[$j] = $arr[$j + 1];
                $arr[$j + 1] = $temp;

                echo implode(", ", $arr) . "\n";
            }
        }
    }
}

echo "원래 배열: " . implode(", ", $arr) . "\n";
bubbleSort($arr);
echo "정렬된 배열: " . implode(", ", $arr) . "\n";*/


$arr3 = [50, 12, 65, 26, 88];
$s = count($arr3);

for ($i = 0; $i < $s - 1; $i++) 

{
    for ($j = 0; $j < $s - $i - 1; $j++)

    {
        if ($arr3[$j] > $arr3[$j + 1]) {
            $temp = $arr3[$j];
            $arr3[$j] = $arr3[$j + 1];
            $arr3[$j + 1] = $temp;
        }

    }
}

print_r($arr3);
/* 
0=50, 1=12, 2=65, 3=26, 4=88
이 부분은 버블 정렬 알고리즘에서 사용되는 두 번의 반복문 중 외부 반복문을 나타냅니다.
 이 부분은 배열을 정렬하는 과정을 시작합니다.

여기서 $i는 외부 반복문의 제어 변수입니다. 
이 변수는 정렬의 각 단계를 나타내며, 각 단계에서는 배열의 마지막 요소부터 정렬되기 때문에 매 단계마다 큰 값이 배열의 끝으로 이동합니다.
 $s는 배열의 길이 (요소 수)를 나타내는 변수입니다.
$i가 0부터 시작하고 $s - 1보다 작을 때까지 반복됩니다.
 이것은 버블 정렬 알고리즘이 배열의 모든 요소를 한 번씩 비교하고 정렬하기 위해 반복하는 과정을 제어합니다. 
 처음에는 가장 큰 값이 배열의 끝에 오게 됩니다.
예를 들어, 배열 [20, 12, 24, 26, 28]의 경우 $i는 0부터 시작하고 3까지 증가하며 배열의 각 요소를 한 번씩 비교하고 정렬하는 과정을 수행합니다.
 이러한 반복을 통해 배열이 순차적으로 정렬됩니다*/

/*

이 부분은 버블 정렬 알고리즘에서 사용되는 내부 반복문을 나타냅니다.
 외부 반복문에서 정렬의 각 단계를 제어하고 내부 반복문에서는 배열 내의 요소를 비교하고 필요한 경우 교체합니다.
여기서 $j는 내부 반복문의 제어 변수입니다. 이 변수는 현재 정렬 중인 배열 요소의 인덱스를 나타냅니다.
 $s는 배열의 길이 (요소 수)를 나타내는 변수이고, $i는 외부 반복문에서 현재까지 정렬된 큰 값의 개수를 나타냅니다.

내부 반복문의 조건은 $j가 0부터 시작하여 $s - $i - 1보다 작을 때까지 반복됩니다.
 이것은 현재 단계에서 비교해야 하는 요소의 범위를 제한합니다. 
 왜냐하면 외부 반복문에서 각 단계가 진행될 때마다 가장 큰 값이 배열의 오른쪽 끝으로 이동하고 있으므로,
내부 반복문에서는 오른쪽에 이미 정렬된 요소들을 비교할 필요가 없기 때문입니다.
내부 반복문은 현재 요소 $arr3[$j]와 그 다음 요소 $arr3[$j + 1]를 비교하고,
 만약 현재 요소가 다음 요소보다 크다면 두 요소를 교환합니다.
  이렇게 함으로써 가장 큰 값이 오른쪽으로 이동하게 됩니다.

예를 들어, 배열 [20, 12, 24, 26, 28]에서 내부 반복문은 $i가 0일 때,
 즉 첫 번째 단계에서 0부터 3까지의 인덱스에 있는 요소를 비교하고 필요한 경우 교체하여 배열을 정렬합니다.
  이런식으로 외부 반복문이 진행됨에 따라 배열이 정렬됩니다.*/ 
  /* 이 부분은 버블 정렬 알고리즘에서 가장 중요한 부분 중 하나로,
 현재 인덱스 $j에 있는 요소와 그 다음 인덱스 $j + 1에 있는 요소를 비교하고,
만약 현재 요소 $arr3[$j]가 다음 요소 $arr3[$j + 1]보다 크다면, 두 요소를 교환합니다.
이 과정은 정렬된 순서를 조정하는 역할을 합니다.
여기서 사용되는 변수와 액션은 다음과 같습니다:
$arr3[$j]: 현재 인덱스 $j에 있는 배열 $arr3의 요소를 나타냅니다.
$arr3[$j + 1]: 다음 인덱스 $j + 1에 있는 배열 $arr3의 요소를 나타냅니다.
$temp: 두 요소를 교환하기 위해 임시로 사용하는 변수입니다.
알고리즘은 현재 요소가 다음 요소보다 큰 경우, 두 요소를 교환하여 더 큰 값이 오른쪽에 위치하도록 합니다.
이것이 버블 정렬 알고리즘의 핵심 아이디어로, 각 단계에서 가장 큰 값이 오른쪽으로 이동하면서 배열이 점차 정렬되는 것을 보장합니다.
예를 들어, 배열 [20, 12, 24, 26, 28]에서 $j가 0일 때, 20과 12를 비교하게 됩니다.
20이 12보다 크므로 두 숫자를 교환하여 배열은 [12, 20, 24, 26, 28]으로 변경됩니다. 
이 과정을 반복하여 가장 큰 값이 배열의 오른쪽 끝으로 이동하게 됩니다.*/
?>